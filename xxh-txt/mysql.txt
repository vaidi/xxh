optimizer_trace

mysql索引
有序结果集：
1：fileSort
2：按索引顺序排序
索引结构
聚簇索引（一级索引）：节点页只包含了索引列，叶子页包含了行的全部数据。聚簇索引“就是表”，因此可以不需要独立行储存。
聚簇索引保证关键字的值相近的元组存储的物理 位置也相近
非聚簇索引(二级索引）：叶子节点保存的不是指行的物理位置的指针，而是行的主键值。（两次B-tree查找）
hash索引：基于哈希表实现只有精确索引所有列的查询才有效。（对每一行数据，存储引擎都会对所有的索引列计算一个哈希码，哈希
索引将装有哈希码存储在一个索引中，同时子哈希表中保存指向的每个数据的指针）只有memory引擎支持hash索引
只是赢hash：InnoDB引擎，当I你弄DB注意到某些索引值被使用的非常频繁，它会在内存中基于缓冲池中的B+Tree索引上创建一个hash索引，
这样B-tree索引也具有哈希索引的一些优点。
全文索引：MyISAM的一个特殊索引

索引类型： 普通索引     唯一索引  主键索引  组合索引
索引失效： 列上进行计算  函数  or not in <>  !=

覆盖索引：
1：就是select的列只用从索引中就能够取得，不必从数据中读取，换句话 说查询列要被使用的索引覆盖。
2：是非聚簇组合索引的一种形式，它包括在查询的select，join和where子句用到的所有列（即建立索引的字段正好是覆盖查询语句【select子句】
与查询条件【where子句】中所设计到的字段，即索引包含了查询正在查找的数据


InnoDB-MVCC多版本并发控制 https://segmentfault.com/a/1190000012650596
Mysql引擎特性~Innodb事物系统  http://mysql.taobao.org/monthly/2017/12/01/

InnoDB的MVCC是通过在每行记录后面保存两个隐含列也有说三个来实现的。
read view 快照生成时机，在RR，RC两种不同的隔离级别下不可见性；
1：在innodb中RR级别，事物在begin/start transacction 之后的一个条select读操作后会创建一个快照（read view），将当前
系统中活跃的其他事物记录起来；RR级别下，快照是基于执行第一个读取操作的时间。
2：RC级别下，事物中每条select语句都会创建一个快照（read view），RC级别，快照被重置为每一个读取操作时间。

MVCC特点：
1：每行数据都存在一个版本，每次数据更新时都更新该版本
2：修改时copy出当前版本，然后随意修改，各个事物之间无干扰
3：保存时比较版本号，如果成功，则覆盖原记录，失败则放弃
4：就是每行都有版本号，保存时根据版本号决定是否成功，听起来含有乐观锁的味道，因为这看起来正式，在提交的
时候才能到底能否提交成功。
实现mvcc方式：
是一种并发控制的方法，它允许多个事务同时对同一行数据进行读写和修改，而不会相互干扰。


1：事物以排它锁的形式修改原始数据
2：把修改前的数据存放在undo log，通过回滚指针与主数据关联
3：修改成功啥都不做，失败则恢复undo log中的数据（rollback）
二者本质区别是：当修改数据是否要排他锁，如果锁定了还算mvcc？
答:Innodb的实现算不上真正的MVCC，undo-log是串行化的，
一行的数据每问题，但当设计到多行数据，理想的mvcc就无能为力了。


mysql的三范式设计：
1，确保每列保持原子性，列不可分。每个字段都是最小的数据单元不可再分。
2，非主键列必须依赖于主键
3，非主键列不能相互依赖





RR级别下通过排它锁+MVCC 一起实现不仅可以保证可重复读，还可以保证部分幻读，而非完全防止；
原因：在如果事物B在事物A执行中，insert了一条数据并提交，事物A再次查询，虽然时undo中的旧版本数据（防止了部分幻读）
，但是事物A中执行update或者delete都是可以成功的，在innodb中的操作可以分为当前读和快照读。
1，当前读，索引记录锁定，rr级别知乎锁记录就是锁行不会锁范围


快照读：简单的select操作（当然不包括lock in share mode，for update）
当前读：innodb在快照读的情况下并没有真正的避免幻读，但是当前读的情况下避免了不可重复读和幻读
（问题：select id >1 然后执行delete id=5  然后再执行select  id>1 查看条数  幻读问题会不会产生） 


error 日志；
慢查询日志；

3个隐藏字段（事务id，回滚指针，如果没有自增主键自增id）
bin  log:所有一条条sql（不包含查询） 二进制文件   恢复 主从同步
redo log:记录的是数据的物理变化，服务宕机可以用来同步数据
undo log：记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据 （也可以是mvcc用到）

ReadView机制 就是一个保存事务id的list列表，记录的是本地事务执行时，mysql还有那些事务在执行，且还没有提交
（当前系统中还有那些活跃的事务）
undo log:中主要保存了数据的基本信息，比如说日志开始位置，结束位置，主键的长度，表id，日志编号，日志类型
undolog 还包含了两个隐藏的字段trx_id(事务id)和roll_pointer(是一个指针，指向这个事务之前的undo log)

redo log保证 事务的持久性，undolog保证了事务的一致性和原子性
Undo-log的知识点
1：Undo-log是innodb mvcc事物特性的重要 组成部分，当我们对记录做了变更操作时会产生undo记录，Undo记录默认被记录
到系统表空间中，但从5.6开始，也可以使用独立的Undo表空间
2：Undo记录中存储的时老版本数据，当一个旧的事物需要读取数据时，为了能读取到老版本的数据，顺着undo链找到满足可见
性的记录，当版本的链很长时，通常可认为这是个比较耗时的操作


记录锁
间隙锁：只有rr和以上级别才支持
临健锁：记录锁+间隙锁 左开右闭，rr级别下，临健锁只与非唯一索引列有关，在唯一索引列上不存在临健锁。


 当数据量很大的时候，count(distinct uid)计算失败怎么办？



rr级别下为什么没解决幻读？
幻读就是事务做范围查询的过程中,有另外一个事务堆范围内新增了记录，导致范围查询的结果条数不一致的现象。


rc 是每次都是读取最新的快照
rr 是基于快照读的，每次读都是用的最原始的一个快照，如果是当前读会加锁
rr 中 如果本事务中的数据发生了修改，那么会更新快照，那么最后一次查询的结果也就发生了变化。

当前读（select for update，update，delete等操作）会产生当前读

连接层->服务层->引擎层->文件系统层

索引下推：
索引下推主要是减少了不必要的回表操作，对于查找出来的数据先过滤掉不符合条件的，其余的再去索引树上上查询
联合索引不满足条件的在引擎层过滤了  不会走回表；
索引下推是指将where条件的部分或全部下推到存储引擎层进行筛选判断，减少回表操作
举个demo:
SELECT * FROM user WHERE name = 'John' AND age > 30;
1,在没有索引下推的情况下，MySQL会首先通过name字段的索引找到所有名为John的用户，然后逐行回表获取数据，并判断年龄是否大于30。
2,而在有索引下推的情况下，MySQL会将age > 30这个条件下推到索引扫描过程中。在扫描索引的同时，就会过滤掉年龄小于等于30的用户，
只回表获取符合条件的行，从而减少了回表操作的次数，提高了查询性能。




sql的执行顺序
1、最先执行from table
2、where语句是条件加以限定
3、group by having
4、聚合函数
5、select
6、order by


left join 小表驱动大表  左边的有几条数据 查询结果就是几个 没有的值为null

inner join 是查询相同的取值  取交集

b树和b+树
b+树：
高效的范围查询
高效的插入和删除操作
支持有序的遍历

b树：
灵活的数据模型：mongodb是一种文档数据库，其数据库模型相对灵活，不需要强制遵循关系型数据库的表结构，
大规模数据处理能里：b+树会增加高度影响查询性能
内存使用率：b+树通常需要在内存中维护索引结构，mogodb索引可能很大无法完全放入内存中，因此mogodb需要一种能够
有效利用磁盘空间的索引结构。


mvcc 的原理讲的还不错的https://juejin.cn/post/7056583607929798692


1，磁盘读写代价b+树更低
2，查询效率b+树更稳定
3，b+树便与扫库和区间查询

mysql的主从复制（异步模式，半同步模式）
1，主数据库特殊的io线程更改记录到binlog
2，从库从主库上的binlog复制到自己的中继日志上去
3,从库读取中继日志上的数据，将器备份到数据库之上（sql线程）





gtid 事务是全局唯一性的，并且一个事务对应一个gtid，一个gtid值在同一个mysql实列只会执行。


